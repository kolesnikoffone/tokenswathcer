# –§–ê–ô–õ: bot.py (–¢–û–õ–¨–ö–û Ton.fun —Ç–æ–∫–µ–Ω—ã)

import requests
import logging
import asyncio
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise Exception("–ù–µ—Ç BOT_TOKEN! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à Ton.fun —Ç–æ–∫–µ–Ω–æ–≤
latest_listings = "–î–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è..."
tonfun_tokens = {}

async def load_tonfun_tokens():
    global tonfun_tokens
    try:
        headers = {"User-Agent": "Mozilla/5.0 (compatible; TelegramBot/1.0)"}
        response = requests.get("https://ton.fun/api/coins/list?page=1&limit=1000", timeout=10, headers=headers)
        if response.status_code != 200:
            raise Exception(f"HTTP {response.status_code}")
        data = response.json()
        coins = data.get("data", [])
        tonfun_tokens = {}
        for coin in coins:
            symbol = coin.get("symbol") or coin.get("name") or "UNKNOWN"
            address = coin.get("jetton_address")
            if address:
                tonfun_tokens[address] = symbol
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ Ton.fun: {e}")
        tonfun_tokens = {}

async def fetch_tonfun():
    message = "üÜï *–ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Ton.fun:*\n"
    try:
        if not tonfun_tokens:
            await load_tonfun_tokens()

        if not tonfun_tokens:
            message += "\n–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."
        else:
            shown = 0
            for address, symbol in list(tonfun_tokens.items())[:10]:
                link = f"https://ton.fun/token/{address}"
                shown += 1
                message += f"{shown}. {symbol} [–°–º–æ—Ç—Ä–µ—Ç—å]({link})\n"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ Ton.fun: {e}")
        message += "\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."

    return message

async def update_listings(context: ContextTypes.DEFAULT_TYPE):
    global latest_listings
    await load_tonfun_tokens()
    tonfun = await fetch_tonfun()
    latest_listings = tonfun + f"\n\n_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M UTC')}_"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å Ton.fun\n–ö–æ–º–∞–Ω–¥–∞: /newlistings")

async def newlistings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(latest_listings, parse_mode='Markdown')

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("newlistings", newlistings))

    job_queue = app.job_queue
    job_queue.run_repeating(update_listings, interval=1800, first=5)

    app.run_polling()

if __name__ == "__main__":
    main()

# –§–ê–ô–õ: bot.py (—Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–æ–≤)

import requests
import logging
import asyncio
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise Exception("–ù–µ—Ç BOT_TOKEN! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
latest_listings = "–î–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è..."

# –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ STON.fi
stonfi_assets = {}

async def load_stonfi_assets():
    global stonfi_assets
    try:
        response = requests.get("https://api.ston.fi/v1/assets", timeout=10)
        assets = response.json().get("assets", [])
        stonfi_assets = {asset["address"]: asset.get("symbol", "???") for asset in assets}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ STON.fi: {e}")
        stonfi_assets = {}

async def fetch_dedust():
    url = "https://api.dedust.io/v2/pools"
    try:
        response = requests.get(url, timeout=10)
        pools = response.json()

        for pool in pools:
            created_ts = pool.get("created_at")
            if created_ts:
                pool["created_dt"] = datetime.utcfromtimestamp(created_ts)
            else:
                pool["created_dt"] = datetime.utcnow()

        sorted_pools = sorted(pools, key=lambda x: x["created_dt"], reverse=True)
        latest = sorted_pools[:10]

        message = "üÜï –ù–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ DeDust:\n"
        for idx, pool in enumerate(latest, 1):
            token0 = pool.get("token0", {}).get("metadata", {}).get("symbol", "???")
            token1 = pool.get("token1", {}).get("metadata", {}).get("symbol", "???")
            date_str = pool["created_dt"].strftime("%d.%m.%Y")
            message += f"{idx}. {token0}/{token1} ‚Äî {date_str}\n"
        return message

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DeDust: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ DeDust."

async def fetch_stonfi():
    url = "https://api.ston.fi/v1/pools"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        pools = data.get("pool_list", [])

        latest = pools[-10:][::-1]

        message = "\nüÜï –ù–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ STON.fi:\n"
        for idx, pool in enumerate(latest, 1):
            token0_address = pool.get("token0_address", "")
            token1_address = pool.get("token1_address", "")
            token0 = stonfi_assets.get(token0_address, token0_address[-6:])
            token1 = stonfi_assets.get(token1_address, token1_address[-6:])
            message += f"{idx}. {token0}/{token1}\n"
        return message

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è STON.fi: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ STON.fi."

async def update_listings(context: ContextTypes.DEFAULT_TYPE):
    global latest_listings
    await load_stonfi_assets()
    dedust = await fetch_dedust()
    stonfi = await fetch_stonfi()
    latest_listings = dedust + "\n" + stonfi + f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M UTC')}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ DeDust –∏ STON.fi.\n–ö–æ–º–∞–Ω–¥–∞: /newlistings")

async def newlistings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(latest_listings)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("newlistings", newlistings))

    job_queue = app.job_queue
    job_queue.run_repeating(update_listings, interval=1800, first=5)

    app.run_polling()

if __name__ == "__main__":
    main()
